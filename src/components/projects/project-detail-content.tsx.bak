"use client";

import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Calendar, Clock, AlertCircle, List } from "lucide-react";
import ProjectKanbanBoard from "@/components/project-kanban-board";
import { useHeader } from "@/components/layout/header-context";
import TaskList from "@/components/task-list";
import TaskListFilter from "@/components/task-list-filter";
import { getProjectTasks } from "@/lib/actions/task-actions";
import { TaskFilterOptions, TaskSortOption, TaskSortField, SortDirection } from "@/types/task";
import { Skeleton } from "@/components/ui/skeleton";

interface Project {
  id: number;
  name: string;
  description: string | null;
  status: string;
}

interface ProjectDetailContentProps {
  project: Project;
}

export default function ProjectDetailContent({ project }: ProjectDetailContentProps) {
  const { setEntityName } = useHeader();
  const [tasks, setTasks] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [currentFilters, setCurrentFilters] = useState<TaskFilterOptions>({});
  const [currentSort, setCurrentSort] = useState<TaskSortOption>({
    field: TaskSortField.PRIORITY,
    direction: SortDirection.DESC
  });

  // Set the project name in the header when the component mounts
  useEffect(() => {
    setEntityName(project.name);
    
    // Clean up when unmounting
    return () => setEntityName(null);
  }, [project.name, setEntityName]);
  
  // Fetch tasks when needed
  const fetchTasks = async (filters?: TaskFilterOptions, sort?: TaskSortOption) => {
    try {
      setIsLoading(true);
      // Get tasks from API
      // Note: The API doesn't directly support sorting via TaskFilterOptions
      // In a real implementation, you would need to add sorting parameters to the API
      const projectTasks = await getProjectTasks(project.id, filters);
      
      // If we have sort options, sort the tasks client-side
      let sortedTasks = [...projectTasks];
      
      if (sort) {
        sortedTasks.sort((a, b) => {
          let valueA, valueB;
          
          switch (sort.field) {
            case TaskSortField.TITLE:
              valueA = a.title?.toLowerCase() || '';
              valueB = b.title?.toLowerCase() || '';
              break;
            case TaskSortField.STATUS:
              valueA = a.status || '';
              valueB = b.status || '';
              break;
            case TaskSortField.PRIORITY:
              // Map priority to numeric values for sorting
              const priorityMap: Record<string, number> = {
                urgent: 4,
                high: 3,
                medium: 2,
                low: 1
              };
              valueA = priorityMap[a.priority || 'medium'] || 0;
              valueB = priorityMap[b.priority || 'medium'] || 0;
              break;
            case TaskSortField.DUE_DATE:
              valueA = a.dueDate ? new Date(a.dueDate).getTime() : Infinity;
              valueB = b.dueDate ? new Date(b.dueDate).getTime() : Infinity;
              break;
            case TaskSortField.CREATED_AT:
              valueA = a.createdAt ? new Date(a.createdAt).getTime() : 0;
              valueB = b.createdAt ? new Date(b.createdAt).getTime() : 0;
              break;
            case TaskSortField.UPDATED_AT:
              valueA = a.updatedAt ? new Date(a.updatedAt).getTime() : 0;
              valueB = b.updatedAt ? new Date(b.updatedAt).getTime() : 0;
              break;
            case TaskSortField.ASSIGNEE:
              valueA = a.assigneeName?.toLowerCase() || '';
              valueB = b.assigneeName?.toLowerCase() || '';
              break;
            default:
              return 0;
          }
          
          // Apply sort direction
          const compareResult = typeof valueA === 'string'
            ? valueA.localeCompare(valueB as string)
            : (valueA as number) - (valueB as number);
          
          return sort.direction === SortDirection.ASC ? compareResult : -compareResult;
        });
      }
      
      setTasks(sortedTasks);
    } catch (error) {
      console.error("Error fetching tasks:", error);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle tab change to load tasks when list tab is selected
  const [activeTab, setActiveTab] = useState("board");
  
  const handleTabChange = (value: string) => {
    setActiveTab(value);
  };
  
  // Load tasks when the list tab is selected
  useEffect(() => {
    if (activeTab === "list" && tasks.length === 0) {
      fetchTasks(currentFilters, currentSort);
    }
  }, [activeTab]);
  
  // Handle filter changes
  const handleFilterChange = (filters: TaskFilterOptions) => {
    // Only update and fetch if filters actually changed
    const filtersChanged = JSON.stringify(filters) !== JSON.stringify(currentFilters);
    if (filtersChanged) {
      setCurrentFilters(filters);
      fetchTasks(filters, currentSort);
    }
  };
  
  // Handle sort changes
  const handleSortChange = (sortOption: TaskSortOption) => {
    // Only update and fetch if sort options actually changed
    const sortChanged = 
      sortOption.field !== currentSort.field || 
      sortOption.direction !== currentSort.direction;
      
    if (sortChanged) {
      setCurrentSort(sortOption);
      fetchTasks(currentFilters, sortOption);
    }
  };
  
  return (
    <div>
      <Tabs value={activeTab} className="w-full" onValueChange={handleTabChange}>
        <TabsList className="mb-6">
          <TabsTrigger value="board">Kanban Board</TabsTrigger>
          <TabsTrigger value="list">List View</TabsTrigger>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="timeline">Timeline</TabsTrigger>
        </TabsList>
        
        <TabsContent value="board">
          <ProjectKanbanBoard projectId={project.id} />
        </TabsContent>
        
        <TabsContent value="list">
          <div className="space-y-4">
            <TaskListFilter 
              projectId={project.id} 
              onFilterChange={handleFilterChange} 
            />
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <List className="h-5 w-5 text-gray-500" />
                  Task List
                </CardTitle>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <div className="space-y-2">
                    <Skeleton className="h-12 w-full" />
                    <Skeleton className="h-12 w-full" />
                    <Skeleton className="h-12 w-full" />
                    <Skeleton className="h-12 w-full" />
                    <Skeleton className="h-12 w-full" />
                  </div>
                ) : (
                  <TaskList 
                    tasks={tasks} 
                    onSortChange={handleSortChange}
                    onFilterChange={handleFilterChange}
                  />
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="overview">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calendar className="h-5 w-5 text-gray-500" />
                  Timeline
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div>
                    <div className="text-sm font-medium">Start Date</div>
                    <div>Jan 15, 2023</div>
                  </div>
                  <div>
                    <div className="text-sm font-medium">Due Date</div>
                    <div>Dec 31, 2023</div>
                  </div>
                  <div>
                    <div className="text-sm font-medium">Duration</div>
                    <div>350 days</div>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Clock className="h-5 w-5 text-gray-500" />
                  Progress
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div>
                    <div className="text-sm font-medium">Tasks Completed</div>
                    <div>24 / 36</div>
                  </div>
                  <div>
                    <div className="text-sm font-medium">Progress</div>
                    <div className="w-full bg-gray-200 rounded-full h-2.5 mt-1">
                      <div className="bg-blue-600 h-2.5 rounded-full" style={{ width: '66%' }}></div>
                    </div>
                    <div className="text-sm mt-1">66% complete</div>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <AlertCircle className="h-5 w-5 text-gray-500" />
                  Issues
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div>
                    <div className="text-sm font-medium">Open Issues</div>
                    <div>3</div>
                  </div>
                  <div>
                    <div className="text-sm font-medium">Critical Issues</div>
                    <div>1</div>
                  </div>
                  <div>
                    <div className="text-sm font-medium">Resolved Issues</div>
                    <div>12</div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="timeline">
          <Card>
            <CardContent className="pt-6">
              <p className="text-gray-500">Timeline view will be implemented soon.</p>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
} 